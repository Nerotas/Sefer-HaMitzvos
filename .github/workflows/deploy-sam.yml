name: Deploy with AWS SAM

on:
  push:
    branches: [main]
    paths:
      - "bots/lambda_mitzvah_bot.py"
      - "template.yaml"
      - ".github/workflows/deploy-sam.yml"
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DELETE_LEGACY_LAMBDA: ${{ secrets.DELETE_LEGACY_LAMBDA }}
    concurrency:
      group: sam-deploy-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clean up failed stack if needed
        run: |
          set -e
          STACK_NAME="daily-mitzvah-bot-stack"
          echo "Checking stack status for $STACK_NAME"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NONE")
          echo "Current stack status: $STATUS"
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STATUS" = "ROLLBACK_FAILED" ]; then
            echo "Deleting failed stack $STACK_NAME before re-deploy..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
            echo "Stack deleted. Proceeding with fresh deploy."
          else
            echo "No cleanup required."
          fi

      - name: Build SAM application
        run: sam build

      - name: Remove legacy Lambda function if present (optional)
        if: ${{ env.DELETE_LEGACY_LAMBDA == 'true' }}
        run: |
          aws lambda delete-function --function-name daily-mitzvah-bot || true

      - name: Deploy SAM application
        run: |
          echo "Using SAM managed default bucket with --resolve-s3"
          sam deploy \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name daily-mitzvah-bot-stack \
            --parameter-overrides \
              TwilioAccountSid=${{ secrets.TWILIO_ACCOUNT_SID }} \
              TwilioAuthToken=${{ secrets.TWILIO_AUTH_TOKEN }} \
              TwilioWhatsAppNumber=${{ secrets.TWILIO_WHATSAPP_NUMBER }} \
              Recipients="${{ secrets.RECIPIENTS }}" \
              WebhookToken="${{ secrets.WEBHOOK_TOKEN }}" \
            --capabilities CAPABILITY_IAM \
            --region ${{ secrets.AWS_REGION }}

      - name: Get function name from stack outputs
        id: get-fn
        run: |
          FN=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotName'].OutputValue" --output text)
          echo "Resolved function name: $FN"
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Get function URL from stack outputs
        id: get-url
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotFunctionUrl'].OutputValue" --output text)
          echo "Function URL: $URL" 
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Warm-up invoke to create log group
        run: |
          aws lambda invoke \
            --function-name "${{ steps.get-fn.outputs.name }}" \
            --payload '{"test_date":"1970-01-01"}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null \
            --region ${{ secrets.AWS_REGION }} || true

      - name: Functional test (today in America/Chicago)
        run: |
          DATE=$(TZ=America/Chicago date +%F)
          echo "Testing with date: $DATE"
          PAYLOAD="{\"test_date\":\"$DATE\",\"test_mode\":true}"
          aws lambda invoke \
            --function-name "${{ steps.get-fn.outputs.name }}" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json \
            --region ${{ secrets.AWS_REGION }} || true
          echo "Lambda response:"
          cat response.json || true

      - name: Set log retention (safe, optional)
        env:
          LOG_RETENTION_DAYS: ${{ secrets.LOG_RETENTION_DAYS }}
        run: |
          DAYS="${LOG_RETENTION_DAYS:-14}"
          LOG_GROUP="/aws/lambda/${{ steps.get-fn.outputs.name }}"
          echo "Ensuring log group $LOG_GROUP exists and retention is $DAYS days"
          aws logs create-log-group \
            --log-group-name "$LOG_GROUP" \
            --region ${{ secrets.AWS_REGION }} || true
          aws logs put-retention-policy \
            --log-group-name "$LOG_GROUP" \
            --retention-in-days "$DAYS" \
            --region ${{ secrets.AWS_REGION }} || true
