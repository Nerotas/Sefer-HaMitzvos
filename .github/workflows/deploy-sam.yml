name: Deploy with AWS SAM

on:
  push:
    branches: [main]
    paths:
      - "bots/lambda_mitzvah_bot.py"
      - "bots/consent_handler.py"
      - "template.yaml"
      - "web/optin.html"
      - ".github/workflows/deploy-sam.yml"
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DELETE_LEGACY_LAMBDA: ${{ secrets.DELETE_LEGACY_LAMBDA }}
    concurrency:
      group: sam-deploy-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clean up failed stack if needed
        run: |
          set -e
          STACK_NAME="daily-mitzvah-bot-stack"
          echo "Checking stack status for $STACK_NAME"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NONE")
          echo "Current stack status: $STATUS"
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STATUS" = "ROLLBACK_FAILED" ]; then
            echo "Deleting failed stack $STACK_NAME before re-deploy..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
            echo "Stack deleted. Proceeding with fresh deploy."
          else
            echo "No cleanup required."
          fi

      - name: Build SAM application
        run: sam build

      - name: Wait for Lambda functions to be idle (avoid 409 conflicts)
        run: |
          # Get existing function names from previous stack version if it exists
          FUNCTIONS=$(aws cloudformation list-stack-resources \
            --stack-name daily-mitzvah-bot-stack \
            --query "StackResourceSummaries[?ResourceType=='AWS::Lambda::Function'].PhysicalResourceId" \
            --output text 2>/dev/null || echo "")

          if [ -n "$FUNCTIONS" ]; then
            echo "Waiting for existing Lambda functions to finish any in-progress updates..."
            for fn in $FUNCTIONS; do
              if [ "$fn" != "None" ] && [ -n "$fn" ]; then
                echo "Checking $fn..."
                for i in {1..60}; do
                  STATUS=$(aws lambda get-function-configuration --function-name "$fn" --query 'LastUpdateStatus' --output text 2>/dev/null || echo "NotFound")
                  if [ "$STATUS" = "NotFound" ]; then
                    echo "$fn not found (may have been deleted)"
                    break
                  fi
                  if [ "$STATUS" != "InProgress" ]; then
                    echo "$fn is $STATUS"
                    break
                  fi
                  echo "$fn is still InProgress, waiting..."
                  sleep 10
                done
              fi
            done
          else
            echo "No existing functions found or stack doesn't exist yet"
          fi

      - name: Remove legacy Lambda function if present (optional)
        if: ${{ env.DELETE_LEGACY_LAMBDA == 'true' }}
        run: |
          aws lambda delete-function --function-name daily-mitzvah-bot || true

      - name: Deploy SAM application
        env:
          WEBHOOK_TOKEN: ${{ secrets.WEBHOOK_TOKEN }}
        run: |
          echo "Using SAM managed default bucket with --resolve-s3"
          PARAMS=(
            "TwilioAccountSid=${{ secrets.TWILIO_ACCOUNT_SID }}"
            "TwilioAuthToken=${{ secrets.TWILIO_AUTH_TOKEN }}"
            "TwilioWhatsAppNumber=${{ secrets.TWILIO_WHATSAPP_NUMBER }}"
            "Recipients=${{ secrets.RECIPIENTS }}"
          )
          # Conditionally include WebhookToken only if provided
          if [ -n "$WEBHOOK_TOKEN" ]; then
            PARAMS+=("WebhookToken=$WEBHOOK_TOKEN")
          fi
          sam deploy \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name daily-mitzvah-bot-stack \
            --parameter-overrides "${PARAMS[@]}" \
            --capabilities CAPABILITY_IAM \
            --region ${{ secrets.AWS_REGION }}

      - name: Get function name from stack outputs
        id: get-fn
        run: |
          FN=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotName'].OutputValue" --output text)
          echo "Resolved function name: $FN"
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Get function URL from stack outputs
        id: get-url
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotFunctionUrl'].OutputValue" --output text)
          echo "Function URL: $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Get consent Function URL from stack outputs
        id: get-consent-url
        run: |
          CURL=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='ConsentFunctionUrl'].OutputValue" --output text)
          echo "Consent Function URL: $CURL"
          echo "consent_url=$CURL" >> $GITHUB_OUTPUT

      - name: Warm-up invoke to create log group
        run: |
          aws lambda invoke \
            --function-name "${{ steps.get-fn.outputs.name }}" \
            --payload '{"test_date":"1970-01-01"}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null \
            --region ${{ secrets.AWS_REGION }} || true

      - name: Functional test (today in America/Chicago)
        run: |
          DATE=$(TZ=America/Chicago date +%F)
          echo "Testing with date: $DATE"
          PAYLOAD="{\"test_date\":\"$DATE\",\"test_mode\":true}"
          aws lambda invoke \
            --function-name "${{ steps.get-fn.outputs.name }}" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json \
            --region ${{ secrets.AWS_REGION }} || true
          echo "Lambda response:"
          cat response.json || true

      - name: Set log retention (safe, optional)
        env:
          LOG_RETENTION_DAYS: ${{ secrets.LOG_RETENTION_DAYS }}
        run: |
          DAYS="${LOG_RETENTION_DAYS:-14}"
          LOG_GROUP="/aws/lambda/${{ steps.get-fn.outputs.name }}"
          echo "Ensuring log group $LOG_GROUP exists and retention is $DAYS days"
          aws logs create-log-group \
            --log-group-name "$LOG_GROUP" \
            --region ${{ secrets.AWS_REGION }} || true
          aws logs put-retention-policy \
            --log-group-name "$LOG_GROUP" \
            --retention-in-days "$DAYS" \
            --region ${{ secrets.AWS_REGION }} || true

  lambda-update:
    name: Update Lambda Functions (explicit names)
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: bot
            file: bots/lambda_mitzvah_bot.py
            zip: mitzvah_bot_lambda.zip
            extra: Schedule.csv
            secretKey: LAMBDA_FUNCTION_NAME_BOT
          - name: consent
            file: bots/consent_handler.py
            zip: consent_handler_lambda.zip
            extra: ""
            secretKey: LAMBDA_FUNCTION_NAME_CONSENT

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twilio requests

      - name: Ensure jq is available
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y jq

      - name: Create Lambda package (${{ matrix.target.name }})
        run: |
          mkdir -p lambda_package
          cp "${{ matrix.target.file }}" lambda_package/
          if [ -n "${{ matrix.target.extra }}" ] && [ -f "${{ matrix.target.extra }}" ]; then
            cp "${{ matrix.target.extra }}" lambda_package/
          fi
          pip install twilio requests -t lambda_package/
          cd lambda_package
          zip -r "../${{ matrix.target.zip }}" .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve explicit Lambda function name (${{ matrix.target.name }})
        id: resolve-fn
        env:
          FN_BOT: ${{ secrets.LAMBDA_FUNCTION_NAME_BOT }}
          FN_CONSENT: ${{ secrets.LAMBDA_FUNCTION_NAME_CONSENT }}
        run: |
          case "${{ matrix.target.name }}" in
            bot)
              FN="$FN_BOT"
              ;;
            consent)
              FN="$FN_CONSENT"
              ;;
          esac
          if [ -z "$FN" ]; then
            echo "No explicit function name secret set for ${{ matrix.target.name }}; skipping this target."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Resolved function name: $FN"
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Upload zip to S3 (optional) (${{ matrix.target.name }})
        id: upload-s3
        if: steps.resolve-fn.outputs.skip != 'true'
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_PREFIX: ${{ secrets.S3_PREFIX }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          if [ -n "$S3_BUCKET" ]; then
            PREFIX=${S3_PREFIX:-lambda}
            KEY="$PREFIX/${{ matrix.target.name }}-$GITHUB_SHA.zip"
            echo "Uploading ${{ matrix.target.zip }} to s3://$S3_BUCKET/$KEY"
            aws s3 cp "${{ matrix.target.zip }}" "s3://$S3_BUCKET/$KEY"
            echo "key=$KEY" >> $GITHUB_OUTPUT
          else
            echo "S3 bucket not set; will use direct zip upload"
            echo "key=" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Lambda (${{ matrix.target.name }})
        if: steps.resolve-fn.outputs.skip != 'true'
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          echo "Checking Lambda update status before deploy..."
          for i in {1..60}; do
            STATUS=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatus' --output text 2>/dev/null || echo "Unknown")
            REASON=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatusReason' --output text 2>/dev/null || echo "")
            echo "Current status: $STATUS ${REASON:+- $REASON}"
            if [ "$STATUS" != "InProgress" ]; then
              break
            fi
            sleep 10
          done

          if [ -n "${{ steps.upload-s3.outputs.key }}" ]; then
            aws lambda update-function-code \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --s3-bucket "$S3_BUCKET" \
              --s3-key "${{ steps.upload-s3.outputs.key }}"
          else
            aws lambda update-function-code \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --zip-file fileb://"${{ matrix.target.zip }}"
          fi

      - name: Wait for code update to complete (poll) (${{ matrix.target.name }})
        if: steps.resolve-fn.outputs.skip != 'true'
        run: |
          echo "Waiting for LastUpdateStatus == Successful"
          for i in {1..90}; do
            STATUS=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatus' --output text)
            REASON=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatusReason' --output text)
            echo "Status: $STATUS ${REASON:+- $REASON}"
            if [ "$STATUS" = "Successful" ]; then
              break
            fi
            if [ "$STATUS" = "Failed" ]; then
              echo "Lambda update failed: $REASON" >&2
              exit 1
            fi
            sleep 10
          done
          if [ "$STATUS" != "Successful" ]; then
            echo "Timed out waiting for Lambda update to complete" >&2
            exit 1
          fi

      - name: Test Lambda function (bot only)
        if: steps.resolve-fn.outputs.skip != 'true' && matrix.target.name == 'bot'
        run: |
          DATE=$(TZ=America/Chicago date +%F)
          echo "Testing with date: $DATE"
          PAYLOAD="{\"test_date\":\"$DATE\",\"test_mode\":true}"
          aws lambda invoke \
            --function-name "${{ steps.resolve-fn.outputs.name }}" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json || true
          echo "Lambda response:"
          cat response.json || true
