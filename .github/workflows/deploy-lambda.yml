name: Deploy Lambda Function

on:
  workflow_run:
    workflows: ["Deploy with AWS SAM"]
    types: [completed]
  workflow_dispatch:
    inputs:
      function_name:
        description: "Lambda function name to update (overrides stack resolution)"
        required: false
        type: string
      update_env:
        description: "Update Lambda environment variables from secrets"
        required: false
        default: false
        type: boolean

concurrency:
  group: lambda-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code (same commit as SAM run or default)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.sha || github.event.workflow_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twilio requests

      - name: Ensure jq is available
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y jq

      - name: Create Lambda package
        run: |
          mkdir lambda_package
          cp bots/lambda_mitzvah_bot.py lambda_package/
          cp Schedule.csv lambda_package/ 2>/dev/null || echo "Schedule.csv not found, using embedded data"
          pip install twilio requests -t lambda_package/
          cd lambda_package
          zip -r ../mitzvah_bot_lambda.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve Lambda function name (dispatch input > stack > secret)
        id: resolve-fn
        env:
          LAMBDA_FN_SECRET: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.function_name }}" ]; then
            FN="${{ inputs.function_name }}"
          else
            FN=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotName'].OutputValue" --output text 2>/dev/null || true)
          fi
          if [ -z "$FN" ] || [ "$FN" = "None" ]; then
            FN="$LAMBDA_FN_SECRET"
          fi
          if [ -z "$FN" ]; then
            echo "Could not resolve Lambda function name" >&2
            exit 1
          fi
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name "${{ steps.resolve-fn.outputs.name }}" \
            --zip-file fileb://mitzvah_bot_lambda.zip

      - name: Wait for code update to complete
        run: |
          aws lambda wait function-updated \
            --function-name "${{ steps.resolve-fn.outputs.name }}"

      - name: Update Lambda configuration (optional)
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_WHATSAPP_NUMBER: ${{ secrets.TWILIO_WHATSAPP_NUMBER }}
          RECIPIENTS: ${{ secrets.RECIPIENTS }}
          UPDATE_LAMBDA_ENV: ${{ secrets.UPDATE_LAMBDA_ENV }}
        run: |
          DO_UPDATE="${UPDATE_LAMBDA_ENV}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.update_env }}" = "true" ]; then
            DO_UPDATE="true"
          fi
          if [ "$DO_UPDATE" = "true" ]; then
            ENV_JSON=$(jq -n \
              --arg sid "$TWILIO_ACCOUNT_SID" \
              --arg tok "$TWILIO_AUTH_TOKEN" \
              --arg wnum "$TWILIO_WHATSAPP_NUMBER" \
              --arg rec "$RECIPIENTS" \
              '{Variables:{TWILIO_ACCOUNT_SID:$sid,TWILIO_AUTH_TOKEN:$tok,TWILIO_WHATSAPP_NUMBER:$wnum,RECIPIENTS:$rec}}')
            echo "Updating environment with: $ENV_JSON" | sed 's/\"/"/g'
            aws lambda update-function-configuration \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --timeout 30 \
              --environment "$ENV_JSON"
          else
            echo "Skipping environment update (UPDATE_LAMBDA_ENV not true)"
          fi

      - name: Wait for configuration update
        run: |
          aws lambda wait function-updated \
            --function-name "${{ steps.resolve-fn.outputs.name }}"

      - name: Test Lambda function
        run: |
          DATE=$(TZ=America/Chicago date +%F)
          echo "Testing with date: $DATE"
          PAYLOAD="{\"test_date\":\"$DATE\",\"test_mode\":true}"
          aws lambda invoke \
            --function-name "${{ steps.resolve-fn.outputs.name }}" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json
          echo "Lambda response:"
          cat response.json
