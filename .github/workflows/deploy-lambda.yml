name: Deploy Lambda Functions (explicit names)

on:
  workflow_run:
    workflows: ["Deploy with AWS SAM"]
    types: [completed]
  workflow_dispatch:
    inputs:
      update_env:
        description: "Update bot Lambda environment variables from secrets"
        required: false
        default: false
        type: boolean

concurrency:
  group: lambda-deploy-daily-mitzvah-bot
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: bot
            file: bots/lambda_mitzvah_bot.py
            zip: mitzvah_bot_lambda.zip
            extra: Schedule.csv
            secretKey: LAMBDA_FUNCTION_NAME_BOT
          - name: consent
            file: bots/consent_handler.py
            zip: consent_handler_lambda.zip
            extra: ""
            secretKey: LAMBDA_FUNCTION_NAME_CONSENT

    steps:
      - name: Checkout code (commit for this event)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.sha || (github.event_name == 'workflow_run' && github.event.workflow_run.head_sha) || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twilio requests

      - name: Ensure jq is available
        run: |
          command -v jq >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y jq

      - name: Create Lambda package (${{ matrix.target.name }})
        run: |
          mkdir -p lambda_package
          cp "${{ matrix.target.file }}" lambda_package/
          if [ -n "${{ matrix.target.extra }}" ] && [ -f "${{ matrix.target.extra }}" ]; then
            cp "${{ matrix.target.extra }}" lambda_package/
          fi
          pip install twilio requests -t lambda_package/
          cd lambda_package
          zip -r "../${{ matrix.target.zip }}" .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve explicit Lambda function name (${{ matrix.target.name }})
        id: resolve-fn
        env:
          FN_BOT: ${{ secrets.LAMBDA_FUNCTION_NAME_BOT }}
          FN_CONSENT: ${{ secrets.LAMBDA_FUNCTION_NAME_CONSENT }}
        run: |
          case "${{ matrix.target.name }}" in
            bot)
              FN="$FN_BOT"
              ;;
            consent)
              FN="$FN_CONSENT"
              ;;
          esac
          if [ -z "$FN" ]; then
            echo "No explicit function name secret set for ${{ matrix.target.name }}; skipping this target."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Resolved function name: $FN"
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Resolve Lambda function name (dispatch input > stack > secret)
        id: resolve-fn
        env:
          LAMBDA_FN_SECRET: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.function_name }}" ]; then
            FN="${{ inputs.function_name }}"
          else
            FN=$(aws cloudformation describe-stacks --stack-name daily-mitzvah-bot-stack --query "Stacks[0].Outputs[?OutputKey=='DailyMitzvahBotName'].OutputValue" --output text 2>/dev/null || true)
          fi
          if [ -z "$FN" ] || [ "$FN" = "None" ]; then
            FN="$LAMBDA_FN_SECRET"
          fi
          if [ -z "$FN" ]; then
            echo "Could not resolve Lambda function name" >&2
            exit 1
          fi
          echo "name=$FN" >> $GITHUB_OUTPUT

      - name: Upload zip to S3 (optional) (${{ matrix.target.name }})
        id: upload-s3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_PREFIX: ${{ secrets.S3_PREFIX }}
          GITHUB_SHA: ${{ github.sha }}
        if: steps.resolve-fn.outputs.skip != 'true'
        run: |
          if [ -n "$S3_BUCKET" ]; then
            PREFIX=${S3_PREFIX:-lambda}
            KEY="$PREFIX/${{ matrix.target.name }}-$GITHUB_SHA.zip"
            echo "Uploading ${{ matrix.target.zip }} to s3://$S3_BUCKET/$KEY"
            aws s3 cp "${{ matrix.target.zip }}" "s3://$S3_BUCKET/$KEY"
            echo "key=$KEY" >> $GITHUB_OUTPUT
          else
            echo "S3 bucket not set; will use direct zip upload"
            echo "key=" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Lambda (${{ matrix.target.name }})
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        if: steps.resolve-fn.outputs.skip != 'true'
        run: |
          # Wait until function is not updating before starting a new update
          echo "Checking Lambda update status before deploy..."
          for i in {1..60}; do
            STATUS=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatus' --output text 2>/dev/null || echo "Unknown")
            REASON=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatusReason' --output text 2>/dev/null || echo "")
            echo "Current status: $STATUS ${REASON:+- $REASON}"
            if [ "$STATUS" != "InProgress" ]; then
              break
            fi
            sleep 10
          done

          if [ -n "${{ steps.upload-s3.outputs.key }}" ]; then
            aws lambda update-function-code \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --s3-bucket "$S3_BUCKET" \
              --s3-key "${{ steps.upload-s3.outputs.key }}"
          else
            aws lambda update-function-code \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --zip-file fileb://"${{ matrix.target.zip }}"
          fi

      - name: Wait for code update to complete (poll) (${{ matrix.target.name }})
        if: steps.resolve-fn.outputs.skip != 'true'
        run: |
          echo "Waiting for LastUpdateStatus == Successful"
          for i in {1..90}; do
            STATUS=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatus' --output text)
            REASON=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatusReason' --output text)
            echo "Status: $STATUS ${REASON:+- $REASON}"
            if [ "$STATUS" = "Successful" ]; then
              break
            fi
            if [ "$STATUS" = "Failed" ]; then
              echo "Lambda update failed: $REASON" >&2
              exit 1
            fi
            sleep 10
          done
          if [ "$STATUS" != "Successful" ]; then
            echo "Timed out waiting for Lambda update to complete" >&2
            exit 1
          fi

      - name: Publish version and update alias (optional, with retry) (${{ matrix.target.name }})
        env:
          UPDATE_ALIAS: ${{ secrets.UPDATE_ALIAS }}
          ALIAS_NAME: ${{ secrets.LAMBDA_ALIAS_NAME }}
        if: steps.resolve-fn.outputs.skip != 'true'
        run: |
          if [ "$UPDATE_ALIAS" = "true" ] && [ -n "$ALIAS_NAME" ]; then
            echo "Publishing new version for function ${{ steps.resolve-fn.outputs.name }}"
            VER=""
            for i in {1..6}; do
              set +e
              VER=$(aws lambda publish-version --function-name "${{ steps.resolve-fn.outputs.name }}" --query Version --output text 2>/tmp/publish_err || true)
              RC=$?
              if [ $RC -eq 0 ] && [ -n "$VER" ] && [ "$VER" != "None" ]; then
                echo "Published version $VER"
                break
              fi
              echo "Publish failed (attempt $i). Retrying in 10s..."
              cat /tmp/publish_err || true
              sleep 10
            done
            if [ -z "$VER" ] || [ "$VER" = "None" ]; then
              echo "Failed to publish version after retries" >&2
              exit 1
            fi

            # Update or create alias with retry
            for i in {1..6}; do
              set +e
              if aws lambda get-alias --function-name "${{ steps.resolve-fn.outputs.name }}" --name "$ALIAS_NAME" >/dev/null 2>&1; then
                aws lambda update-alias --function-name "${{ steps.resolve-fn.outputs.name }}" --name "$ALIAS_NAME" --function-version "$VER" && OK=1 || OK=0
              else
                aws lambda create-alias --function-name "${{ steps.resolve-fn.outputs.name }}" --name "$ALIAS_NAME" --function-version "$VER" && OK=1 || OK=0
              fi
              if [ "$OK" = "1" ]; then
                echo "Alias $ALIAS_NAME now points to version $VER"
                break
              fi
              echo "Alias operation failed (attempt $i). Retrying in 10s..."
              sleep 10
            done
          else
            echo "Skipping alias promotion"
          fi

      - name: Update Lambda configuration (optional, bot only)
        if: steps.resolve-fn.outputs.skip != 'true' && matrix.target.name == 'bot'
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_WHATSAPP_NUMBER: ${{ secrets.TWILIO_WHATSAPP_NUMBER }}
          RECIPIENTS: ${{ secrets.RECIPIENTS }}
          UPDATE_LAMBDA_ENV: ${{ secrets.UPDATE_LAMBDA_ENV }}
        run: |
          DO_UPDATE="${UPDATE_LAMBDA_ENV}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.update_env }}" = "true" ]; then
            DO_UPDATE="true"
          fi
          if [ "$DO_UPDATE" = "true" ]; then
            ENV_JSON=$(jq -n \
              --arg sid "$TWILIO_ACCOUNT_SID" \
              --arg tok "$TWILIO_AUTH_TOKEN" \
              --arg wnum "$TWILIO_WHATSAPP_NUMBER" \
              --arg rec "$RECIPIENTS" \
              '{Variables:{TWILIO_ACCOUNT_SID:$sid,TWILIO_AUTH_TOKEN:$tok,TWILIO_WHATSAPP_NUMBER:$wnum,RECIPIENTS:$rec}}')
            echo "Updating environment with: $ENV_JSON" | sed 's/\"/"/g'
            aws lambda update-function-configuration \
              --function-name "${{ steps.resolve-fn.outputs.name }}" \
              --timeout 30 \
              --environment "$ENV_JSON"
          else
            echo "Skipping environment update (UPDATE_LAMBDA_ENV not true)"
          fi

      - name: Wait for configuration update (poll) (${{ matrix.target.name }})
        if: steps.resolve-fn.outputs.skip != 'true' && matrix.target.name == 'bot'
        run: |
          echo "Waiting for configuration update to complete"
          for i in {1..90}; do
            STATUS=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatus' --output text)
            REASON=$(aws lambda get-function-configuration --function-name "${{ steps.resolve-fn.outputs.name }}" --query 'LastUpdateStatusReason' --output text)
            echo "Status: $STATUS ${REASON:+- $REASON}"
            if [ "$STATUS" = "Successful" ]; then
              break
            fi
            if [ "$STATUS" = "Failed" ]; then
              echo "Config update failed: $REASON" >&2
              exit 1
            fi
            sleep 10
          done
          if [ "$STATUS" != "Successful" ]; then
            echo "Timed out waiting for Lambda configuration update" >&2
            exit 1
          fi

      - name: Test Lambda function (bot only)
        if: steps.resolve-fn.outputs.skip != 'true' && matrix.target.name == 'bot'
        run: |
          DATE=$(TZ=America/Chicago date +%F)
          echo "Testing with date: $DATE"
          PAYLOAD="{\"test_date\":\"$DATE\",\"test_mode\":true}"
          aws lambda invoke \
            --function-name "${{ steps.resolve-fn.outputs.name }}" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json
          echo "Lambda response:"
          cat response.json
